# SPDX-License-Identifier: Apache-2.0
---
# Common NWAS ASCS/ERS post-installation steps AFTER the cluster setup.

# SAPStartSrv resource agent / Simple Mount
- name: "SAP HA Pacemaker - Make sure SAPStartSrv systemd units are enabled"
  ansible.builtin.service:
    name: "{{ sapstartsrv_srv_item }}"
    enabled: true
  loop:
    - sapping
    - sappong
  loop_control:
    loop_var: sapstartsrv_srv_item
  when:
    - __sap_ha_pacemaker_cluster_nwas_cs_ers_simple_mount
  ignore_errors: "{{ ansible_check_mode }}"


# Block for configuring the SAP HA Interface (sap_cluster_connector).
#
# The 'sap-cluster-connector' package is already optionally added to
# '__sap_ha_pacemaker_cluster_sap_extra_packages'.
- name: "SAP HA Pacemaker - (SAP HA Interface) Configure SAP HA Interface"
  when:
    - sap_ha_pacemaker_cluster_enable_cluster_connector
  block:

    - name: "SAP HA Pacemaker - (SAP HA Interface) Add {{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm
       user to 'haclient' group"  # noqa name[template]
      ansible.builtin.user:
        name: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
        groups: haclient
        append: true
        state: present

    # Using 'lineinfile' with a nested loop to avoid duplicate entries for existing configuration.
    - name: "SAP HA Pacemaker - (SAP HA Interface) Add connector to start profiles"
      ansible.builtin.lineinfile:
        backup: true
        path: "{{ nwas_profile_item.0 }}"
        line: "{{ nwas_profile_item.1 }}"
      loop: "{{ __sap_ha_pacemaker_cluster_nwas_ascs_ers_profile_paths
              | product(__sap_ha_pacemaker_cluster_connector_config_lines)
             }}"
      loop_control:
        loop_var: nwas_profile_item
        label: "{{ nwas_profile_item.0 }} -> {{ nwas_profile_item.1 }}"
    # Throttle and retry loop was added to combat NFS write lockups on Azure NFS
      throttle: 1
      retries: "{{ 1 if ansible_check_mode else 30 }}"
      delay: "{{ 1 if ansible_check_mode else 10 }}"
      ignore_errors: "{{ ansible_check_mode }}"

    # Sleep is required to ensure that Sapstarsrv process is available before checking with WaitforStarted.
    - name: "SAP HA Pacemaker - (SAP HA Interface) Wait for ASCS and ERS to be up and running"
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      ansible.builtin.shell: |
        sleep 20
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ascs_instance_nr }} -function WaitforStarted 600 5
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function WaitforStarted 600 5
      changed_when: false
      failed_when: false
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"


    # Existing steps were modified to align with best practices.
    # Cluster connector requires restart of Sapstartsrv resources, but complete group restart is recommended.
    # Resource restart is initiated from one node.
    - name: "SAP HA Pacemaker - (SAP HA Interface) Restart ASCS and ERS resource groups"
      ansible.builtin.shell: |
        {{ __sap_ha_pacemaker_cluster_command.resource_restart }} {{ item }}
      loop:
        - "{{ __sap_ha_pacemaker_cluster_vip_nwas_ascs_resource_group_name }}"
        - "{{ __sap_ha_pacemaker_cluster_vip_nwas_ers_resource_group_name }}"
      run_once: true
      changed_when: true

    # Wait for resources to come up after group restart.
    # Register value is used to determine where resource is started, while unmanaged by cluster.
    # Sleep is required to ensure that Sapstarsrv process is available before checking with WaitforStarted.
    - name: "SAP HA Pacemaker - (SAP HA Interface) Wait for ASCS to be up and running"
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_where_ascs
      ansible.builtin.shell: |
        sleep 20
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ascs_instance_nr }} -function WaitforStarted 600 5
      changed_when: false
      failed_when: false

    - name: "SAP HA Pacemaker - (SAP HA Interface) Wait for ERS to be up and running"
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_where_ers
      ansible.builtin.shell: |
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function WaitforStarted 600 5
      changed_when: false
      failed_when: false


    - name: "SAP HA Pacemaker - (SAP HA Interface) Block to get HAGetFailoverConfig and HACheckConfig for ASCS"
      when:
        - __sap_ha_pacemaker_cluster_register_where_ascs.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_ascs.rc == 0
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"
      block:
        # HAGetFailoverConfig function checks live status of High Availability.
        # Empty output and 'HAActive: FALSE' can be caused by Sapstartsrv not using cluster connector yet.
        - name: "SAP HA Pacemaker - (SAP HA Interface) Get HAGetFailoverConfig for ASCS"
          register: __sap_ha_pacemaker_cluster_register_ascs_ha_failover_config
          ansible.builtin.shell: |
            /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ascs_instance_nr }} -function HAGetFailoverConfig
          changed_when: false

        # HACheckConfig function checks SAP System configuration for High Availability
        - name: "SAP HA Pacemaker - (SAP HA Interface) Get HACheckConfig for ASCS"
          register: __sap_ha_pacemaker_cluster_register_ascs_ha_check_config
          ansible.builtin.shell: |
            /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ascs_instance_nr }} -function HACheckConfig
          changed_when: false
          failed_when: false

        - name: "SAP HA Pacemaker - (SAP HA Interface) Display HACheckConfig and HAGetFailoverConfig results for ASCS"
          ansible.builtin.debug:
            msg: |
              HAGetFailoverConfig:
              {{ __sap_ha_pacemaker_cluster_register_ascs_ha_failover_config.stdout_lines }}

              HACheckConfig:
              {{ __sap_ha_pacemaker_cluster_register_ascs_ha_check_config.stdout_lines }}


    - name: "SAP HA Pacemaker - (SAP HA Interface) Block to get HAGetFailoverConfig and HACheckConfig for ERS"
      when:
        - __sap_ha_pacemaker_cluster_register_where_ers.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_ers.rc == 0
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"
      block:
        - name: "SAP HA Pacemaker - (SAP HA Interface) Get HAGetFailoverConfig for ERS"
          register: __sap_ha_pacemaker_cluster_register_ers_ha_failover_config
          ansible.builtin.shell: |
            /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function HAGetFailoverConfig
          changed_when: false

        - name: "SAP HA Pacemaker - (SAP HA Interface) Get HACheckConfig for ERS"
          register: __sap_ha_pacemaker_cluster_register_ers_ha_check_config
          ansible.builtin.shell: |
            /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function HACheckConfig
          changed_when: false
          failed_when: false

        - name: "SAP HA Pacemaker - (SAP HA Interface) Display HACheckConfig and HAGetFailoverConfig results for ERS"
          ansible.builtin.debug:
            msg: |
              HAGetFailoverConfig:
              {{ __sap_ha_pacemaker_cluster_register_ers_ha_failover_config.stdout_lines }}

              HACheckConfig:
              {{ __sap_ha_pacemaker_cluster_register_ers_ha_check_config.stdout_lines }}


    # Ensure there are no errors before resources get restarted.
    - name: "SAP HA Install Pacemaker - Cluster resource cleanup before restart"
      ansible.builtin.shell: |
        {{ __sap_ha_pacemaker_cluster_command.resource_cleanup }}
      changed_when: true


    # Block to repeat resource group restart if checks failed.
    # HAGetFailoverConfig with 'HAActive: FALSE' will be caught.
    # HACheckConfig with any line starting with 'ERROR' will be caught.
    # regex_search is 'NoneType' when string is not found, therefore any type beside NoneType is considered fail.
    - name: "SAP HA Pacemaker - (SAP HA Interface) Block for ASCS ERS restart"
      when:
        - __sap_ha_pacemaker_cluster_register_ascs_ha_failover_config.stdout | d('') | regex_search('^HAActive:\\s+FALSE$', multiline=True) is not none
          or __sap_ha_pacemaker_cluster_register_ers_ha_failover_config.stdout | d('') | regex_search('^HAActive:\\s+FALSE$', multiline=True) is not none
          or __sap_ha_pacemaker_cluster_register_ascs_ha_check_config.stdout | d('') | regex_search('^ERROR,', multiline=True) is not none
          or __sap_ha_pacemaker_cluster_register_ers_ha_check_config.stdout | d('') | regex_search('^ERROR,', multiline=True) is not none
      vars:
        __rsc_ascs: "{{ __sap_ha_pacemaker_cluster_nwas_ascs_sapinstance_resource_name }}"
        __rsc_ers: "{{ __sap_ha_pacemaker_cluster_nwas_ers_sapinstance_resource_name }}"
      block:
        - name: "SAP HA Pacemaker - (SAP HA Interface) Restart ASCS and ERS resource groups"
          ansible.builtin.shell: |
            {{ __sap_ha_pacemaker_cluster_command.resource_restart }} {{ item }}
          loop:
            - "{{ __sap_ha_pacemaker_cluster_vip_nwas_ascs_resource_group_name }}"
            - "{{ __sap_ha_pacemaker_cluster_vip_nwas_ers_resource_group_name }}"
          run_once: true
          changed_when: true

        # Sleep is required to ensure that Sapstarsrv process is available before checking with WaitforStarted.
        - name: "SAP HA Pacemaker - (SAP HA Interface) Wait for ASCS to be up and running"
          become: true
          become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
          register: __sap_ha_pacemaker_cluster_register_where_ascs_restart
          ansible.builtin.shell: |
            sleep 20
            /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ascs_instance_nr }} -function WaitforStarted 600 30
          changed_when: false
          failed_when: false

        - name: "SAP HA Pacemaker - (SAP HA Interface) Wait for ERS to be up and running"
          become: true
          become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
          register: __sap_ha_pacemaker_cluster_register_where_ers_restart
          ansible.builtin.shell: |
            /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function WaitforStarted 600 30
          changed_when: false
          failed_when: false

        # Ensure there are no errors after resources were restarted
        - name: "SAP HA Install Pacemaker - Cluster resource cleanup after restart"
          ansible.builtin.shell: |
            {{ __sap_ha_pacemaker_cluster_command.resource_cleanup }}
          changed_when: true


        # Repeat checks after resource groups were restarted second time.
        - name: "SAP HA Pacemaker - (SAP HA Interface) Block to get HAGetFailoverConfig and HACheckConfig for ASCS after restart"
          when:
            - __sap_ha_pacemaker_cluster_register_where_ascs_restart.rc is defined
            - __sap_ha_pacemaker_cluster_register_where_ascs_restart.rc == 0
          become: true
          become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
          check_mode: false
          ignore_errors: "{{ ansible_check_mode }}"
          block:
            - name: "SAP HA Pacemaker - (SAP HA Interface) Get HAGetFailoverConfig for ASCS after restart"
              register: __sap_ha_pacemaker_cluster_register_ascs_ha_failover_config_restart
              ansible.builtin.shell: |
                /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ascs_instance_nr }} -function HAGetFailoverConfig
              changed_when: false
              failed_when:
                - __sap_ha_pacemaker_cluster_register_ascs_ha_failover_config_restart.stdout | d('') | regex_search('^HAActive:\\s+FALSE$', multiline=True) is not none

            - name: "SAP HA Pacemaker - (SAP HA Interface) Get HACheckConfig for ASCS after restart"
              register: __sap_ha_pacemaker_cluster_register_ascs_ha_check_config_restart
              ansible.builtin.shell: |
                /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ascs_instance_nr }} -function HACheckConfig
              changed_when: false
              failed_when:
                - __sap_ha_pacemaker_cluster_register_ascs_ha_check_config_restart.stdout | d('') | regex_search('^ERROR,', multiline=True) is not none

            - name: "SAP HA Pacemaker - (SAP HA Interface) Display HACheckConfig and HAGetFailoverConfig results for ASCS after restart"
              ansible.builtin.debug:
                msg: |
                  HAGetFailoverConfig:
                  {{ __sap_ha_pacemaker_cluster_register_ascs_ha_failover_config_restart.stdout_lines }}

                  HACheckConfig:
                  {{ __sap_ha_pacemaker_cluster_register_ascs_ha_check_config_restart.stdout_lines }}


        - name: "SAP HA Pacemaker - (SAP HA Interface) Block to get HAGetFailoverConfig and HACheckConfig for ERS after restart"
          when:
            - __sap_ha_pacemaker_cluster_register_where_ers_restart.rc is defined
            - __sap_ha_pacemaker_cluster_register_where_ers_restart.rc == 0
          become: true
          become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
          check_mode: false
          ignore_errors: "{{ ansible_check_mode }}"
          block:
            - name: "SAP HA Pacemaker - (SAP HA Interface) Get HAGetFailoverConfig for ERS after restart"
              register: __sap_ha_pacemaker_cluster_register_ers_ha_failover_config_restart
              ansible.builtin.shell: |
                /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function HAGetFailoverConfig
              changed_when: false
              failed_when:
                - __sap_ha_pacemaker_cluster_register_ers_ha_failover_config_restart.stdout | d('') | regex_search('^HAActive:\\s+FALSE$', multiline=True) is not none

            - name: "SAP HA Pacemaker - (SAP HA Interface) Get HACheckConfig for ERS after restart"
              register: __sap_ha_pacemaker_cluster_register_ers_ha_check_config_restart
              ansible.builtin.shell: |
                /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function HACheckConfig
              changed_when: false
              failed_when:
                - __sap_ha_pacemaker_cluster_register_ers_ha_check_config_restart.stdout | d('') | regex_search('^ERROR,', multiline=True)  is not none

            - name: "SAP HA Pacemaker - (SAP HA Interface) Display HACheckConfig and HAGetFailoverConfig results for ERS after restart"
              ansible.builtin.debug:
                msg: |
                  HAGetFailoverConfig:
                  {{ __sap_ha_pacemaker_cluster_register_ers_ha_failover_config_restart.stdout_lines }}

                  HACheckConfig:
                  {{ __sap_ha_pacemaker_cluster_register_ers_ha_check_config_restart.stdout_lines }}

    ### END of BLOCK for resource group restarts after failed checks.

### END of BLOCK for sap_cluster_connector.
