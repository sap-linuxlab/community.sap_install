---

- name: Set SELinux state to '{{ sap_general_preconfigure_selinux_state }}' in /etc/selinux/config
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: ^SELINUX\s*=.*
    line: "SELINUX={{ sap_general_preconfigure_selinux_state }}"
    state: present
  register: __sap_general_preconfigure_register_selinux_config_state_changed
  notify: __sap_general_preconfigure_reboot_handler

- name: Set SELinux type to 'targeted' in /etc/selinux/config
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: ^SELINUXTYPE\s*=.*
    line: 'SELINUXTYPE=targeted'
    state: present
  register: __sap_general_preconfigure_register_selinux_config_type_changed
  notify: __sap_general_preconfigure_reboot_handler

# Set a new SELinux mode variable to the SELinux status if 'disabled' or otherwise to
# the value of the 'mode' member ('permissive' or 'enforcing')
- name: SELinux - Set an SELinux mode variable
  ansible.builtin.set_fact:
    __sap_general_preconfigure_fact_selinux_mode: "{{ (ansible_selinux.status == 'disabled') | ternary(ansible_selinux.status, ansible_selinux.mode) }}"

- name: SELinux - Display the current SELinux mode or status
  ansible.builtin.debug:
    var: __sap_general_preconfigure_fact_selinux_mode

# Reason for noqa: We need to notify a handler in another role, which is not possible from a handler in the current role
- name: SELinux - Set the flag that reboot is needed to apply changes # noqa no-handler
  ansible.builtin.set_fact:
    sap_general_preconfigure_fact_reboot_required: true
  when: __sap_general_preconfigure_register_selinux_config_state_changed.changed or
        __sap_general_preconfigure_register_selinux_config_type_changed.changed or
        __sap_general_preconfigure_fact_selinux_mode != sap_general_preconfigure_selinux_state

- name: SELinux - Call Reboot handler if necessary
  ansible.builtin.command: /bin/true
  notify: __sap_general_preconfigure_reboot_handler
  changed_when: false
  when: __sap_general_preconfigure_fact_selinux_mode != sap_general_preconfigure_selinux_state

- name: Set or unset SELinux kernel parameter, RHEL 8 and RHEL 9
  when:
    - ansible_os_family == 'RedHat'
    - ( ansible_distribution_major_version == '8' or
        ansible_distribution_major_version == '9'
      )
  block:

    - name: SELinux - Examine grub entries
      ansible.builtin.shell: set -o pipefail && grubby --info=ALL | awk 'BEGIN{a=0;b=0}/^args/{a++}/selinux=0/{b++}END{print a, b}'
      register: __sap_general_preconfigure_register_grubby_info_all_selinux
      check_mode: no
      changed_when: false

    - name: Disable SELinux on the kernel command line, RHEL 8 and RHEL 9
      when:
        - sap_general_preconfigure_selinux_state == 'disabled'
        - __sap_general_preconfigure_register_grubby_info_all_selinux.stdout.split(' ').1 !=
          __sap_general_preconfigure_register_grubby_info_all_selinux.stdout.split(' ').0
      block:

# If the number of grub entries for args is different from the number of grub entries with "selinux=0",
# we know that at least one grub entry is missing "selinux=0", so we make sure that all grub entries
# contain "selinux=0"
        - name: Disable SELinux also on the kernel command line, RHEL 8 and RHEL 9
          ansible.builtin.command: grubby --args="selinux=0" --update-kernel=ALL
          notify: __sap_general_preconfigure_reboot_handler
          changed_when: yes

# Reason for noqa: We need to notify a handler in another role, which is not possible from a handler in the current role
        - name: SELinux, disable on the kernel command line - Set the flag that reboot is needed to apply changes # noqa no-handler
          ansible.builtin.set_fact:
            sap_general_preconfigure_fact_reboot_required: true

    - name: Enable SELinux on the kernel command line, RHEL 8 and RHEL 9
      when:
        - sap_general_preconfigure_selinux_state == 'enforcing' or
          sap_general_preconfigure_selinux_state == 'permissive'
        - __sap_general_preconfigure_register_grubby_info_all_selinux.stdout.split(' ').1 != '0'
      block:

# If the number of grub entries for args with "selinux=0" is not 0, we know that there is at least
# one grub entry with "selinux=0", so we make sure that no grub entry contains "selinux=0"
        - name: Make sure SELinux is not disabled on the kernel command line, RHEL 8 and RHEL 9
          ansible.builtin.command: grubby --remove-args="selinux" --update-kernel=ALL
          notify: __sap_general_preconfigure_reboot_handler
          changed_when: yes

# Reason for noqa: We need to notify a handler in another role, which is not possible from a handler in the current role
        - name: SELinux, enable on the kernel command line - Set the flag that reboot is needed to apply changes # noqa no-handler
          ansible.builtin.set_fact:
            sap_general_preconfigure_fact_reboot_required: true

- name: SELinux - Display the content of sap_general_preconfigure_fact_reboot_required
  ansible.builtin.debug:
    var: sap_general_preconfigure_fact_reboot_required | d(false)

- name: SELinux - Warn if the SELinux file contexts cannot be set
  ansible.builtin.debug:
    msg: "WARN: The SELinux file context cannot be set on an SELinux disabled system!"
  when:
    - sap_general_preconfigure_modify_selinux_labels
    - __sap_general_preconfigure_fact_selinux_mode == 'disabled'

- name: SELinux - Configure SELinux file contexts
  ansible.builtin.include_role:
    name: '{{ sap_general_preconfigure_system_roles_collection }}.selinux'
  vars:
    selinux_booleans:
      - { name: 'selinuxuser_execmod', state: 'on' }
    selinux_fcontexts:
      - "{{ sap_general_preconfigure_fact_targets_setypes }}"
    selinux_restore_dirs:
      - "{{ sap_general_preconfigure_sap_directories }}"
  when:
    - sap_general_preconfigure_modify_selinux_labels
    - sap_general_preconfigure_selinux_state != 'disabled'
    - __sap_general_preconfigure_fact_selinux_mode != 'disabled'
