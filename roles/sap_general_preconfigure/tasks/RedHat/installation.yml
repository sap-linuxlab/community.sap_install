---

- name: Perform steps for enabling required repos
  when: sap_general_preconfigure_enable_repos
  block:

    - name: Unset list of RHEL repos, SAP NetWeaver
      ansible.builtin.set_fact:
        __sap_general_preconfigure_req_netweaver_repos: ''
      when: not sap_general_preconfigure_use_netweaver_repos

    - name: Unset list of RHEL repos, SAP HANA
      ansible.builtin.set_fact:
        __sap_general_preconfigure_req_hana_repos: ''
      when: not sap_general_preconfigure_use_hana_repos

    - name: Unset list of RHEL repos, high availability
      ansible.builtin.set_fact:
        __sap_general_preconfigure_req_ha_repos: ''
      when: not sap_general_preconfigure_use_ha_repos

    - name: Set final list of repos, non-s390x, auto
      ansible.builtin.set_fact:
        __sap_general_preconfigure_req_repos:
          "{{ __sap_general_preconfigure_req_os_repos | list +
           __sap_general_preconfigure_req_netweaver_repos | list +
           __sap_general_preconfigure_req_hana_repos | list +
           __sap_general_preconfigure_req_ha_repos | list }}"
      when:
        - sap_general_preconfigure_req_repos is undefined
        - ansible_architecture != 's390x'

    - name: Set final list of repos, s390x, auto
      ansible.builtin.set_fact:
        __sap_general_preconfigure_req_repos:
          "{{ __sap_general_preconfigure_req_os_repos | list +
           __sap_general_preconfigure_req_netweaver_repos | list +
           __sap_general_preconfigure_req_ha_repos | list }}"
      when:
        - sap_general_preconfigure_req_repos is undefined
        - ansible_architecture == 's390x'

    - name: Set final list of repos, manual
      ansible.builtin.set_fact:
        __sap_general_preconfigure_req_repos: "{{ sap_general_preconfigure_req_repos }}"
      when: sap_general_preconfigure_req_repos is defined

    - name: Set subscription-manager argument for disabling all other repos to empty string
      ansible.builtin.set_fact:
        __sap_general_preconfigure_fact_disable_all_other_repos_arg: ''
      when: not sap_general_preconfigure_disable_all_other_repos

    - name: Set subscription-manager argument for disabling all other repos before enabling the desired ones
      ansible.builtin.set_fact:
        __sap_general_preconfigure_fact_disable_all_other_repos_arg: '--disable="*" '
      when: sap_general_preconfigure_disable_all_other_repos

    - name: Construct valid argument list to the subscription-manager repos command
      ansible.builtin.set_fact:
        __sap_general_preconfigure_fact_required_repos_args:
          "{{ ['--enable='] | product(__sap_general_preconfigure_req_repos) | map('join') | list }}"

    - name: Set fact for the subscription-manager command
      ansible.builtin.set_fact:
        __sap_general_preconfigure_fact_subscription_manager_command:
          "subscription-manager repos {{ __sap_general_preconfigure_fact_disable_all_other_repos_arg }} {{ __sap_general_preconfigure_fact_required_repos_args | map('quote') | join(' ') }}"

    - name: Display the subscription-manager command
      ansible.builtin.debug:
        msg: "Command: {{ __sap_general_preconfigure_fact_subscription_manager_command }}"

# Reason for noqa: Avoid calling one more command for getting the currently enabled repos
# and then having to compare the output against the list of desired repos
    - name: Run the subscription-manager command # noqa no-changed-when
      ansible.builtin.command: "{{ __sap_general_preconfigure_fact_subscription_manager_command }}"

# Reason for noqa: We need the output of the yum command
    - name: Get list of enabled repositories
      ansible.builtin.command: "yum repolist" # noqa command-instead-of-module
      register: __sap_general_preconfigure_register_yum_repolist
      changed_when: false

    - name: Display the list of enabled repositories
      ansible.builtin.debug:
        var: __sap_general_preconfigure_register_yum_repolist.stdout_lines

- name: Detect if the RHEL minor release lock is set
  ansible.builtin.shell: set -o pipefail && subscription-manager release --show | awk '{print $NF}'
  register: __sap_general_preconfigure_register_subscription_manager_release
  changed_when: false
  when: sap_general_preconfigure_set_minor_release

- name: Assert that the RHEL minor release lock is set
  ansible.builtin.debug:
    msg: "The RHEL minor release lock is set correctly to '{{ __sap_general_preconfigure_register_subscription_manager_release.stdout }}'."
  when:
    - sap_general_preconfigure_set_minor_release
    - __sap_general_preconfigure_register_subscription_manager_release.stdout == ansible_distribution_version

- name: Set the minor RHEL release
  ansible.builtin.command: subscription-manager release --set="{{ ansible_distribution_version }}"
  when:
    - sap_general_preconfigure_set_minor_release
    - __sap_general_preconfigure_register_subscription_manager_release.stdout != ansible_distribution_version

- name: Ensure that the required package groups are installed, RHEL 7
  ansible.builtin.command: "yum install {{ sap_general_preconfigure_packagegroups | join(' ') }} -y"
  register: __sap_general_preconfigure_register_yum_group_install
  when: ansible_distribution_major_version == '7'

- name: Display the output of the yum install command
  ansible.builtin.debug:
    var: __sap_general_preconfigure_register_yum_group_install
  when: ansible_distribution_major_version == '7'

- name: Ensure that the required package groups are installed, RHEL 8 and RHEL 9
# Note: We want to avoid unwanted package upgrades, see bug 1983749.
  ansible.builtin.command: "yum install {{ sap_general_preconfigure_packagegroups | join(' ') }} --nobest --exclude=kernel* -y"
  register: __sap_general_preconfigure_register_yum_group_install
  when: ansible_distribution_major_version == '8' or ansible_distribution_major_version == '9'

- name: Display the output of the yum install command
  ansible.builtin.debug:
    var: __sap_general_preconfigure_register_yum_group_install
  when: ansible_distribution_major_version == '8' or ansible_distribution_major_version == '9'

- name: Ensure that the required packages are installed
  ansible.builtin.package:
    state: present
    name: "{{ sap_general_preconfigure_packages }}"

- name: Ensure that the minimum required package versions are installed
  when:
    - sap_general_preconfigure_min_package_check|bool
    - __sap_general_preconfigure_min_pkgs|d([])
  block:

    - name: Create a list of minimum required package versions to be installed
# How does it work?
# 1 - Print the required package name and version with a prefix "1" followed by a space.
# 2 - In the same output sequence, list all installed versions of this package with a prefix "2" followed by a space.
# 3 - Replace all occurrences of ".el" by ".0.0" so that the sort -V correctly sorts packages with ".el" in its name
# 4 - Sort the list by the name and version.
# 5 - Replace ".0.0" by ".el" again to get back the original names.
# 6 - Store the last installed version of the package in variable latestpkg.
# 7 - Store the last content of column 1 in variable col1, the last content of column 2 in variable col2,
#     and the last number of fields in variable _nf.
# 8 - case 1: If the last number of output fields is greater than 2, it indicates that the package is not installed
#             because the output of "rpm -q" will be similar to "package XXX is not installed".
# 8 - case 2a: If the first column of the last line of the output is "1", it means that the required package is
#              the latest of all required and installed versions of the package, so it means that the package needs
#              to be updated.
# 8 - case 2b: If the first column of the last line of the output is "2", it means that at least of the installed
#              versions the package is equal to or greater than the required package version.
      ansible.builtin.shell: |
        (echo "1 {{ pkg[0] }}-{{ pkg[1] }}";rpm -q --qf "%{NAME}-%{VERSION}-%{RELEASE}\n" {{ pkg[0] }} |
         awk '{printf ("2 %s\n", $0)}') |
         awk '{gsub ("\\.el", ".0.0"); print}' |
         sort -k 2 -k 1 -V |
         awk '{gsub ("\\.0\\.0", ".el"); col1=$1; col2=$2; _nf=NF}
           $1==2{latestpkg=$2}
           END {
               if (_nf>2) {
                  printf ("{{ pkg[0] }}-{{ pkg[1] }}\n")
               } else {
                  if (col1==1) {
                     printf ("{{ pkg[0] }}-{{ pkg[1] }}\n")
                  }
               }
            }'
      with_list: "{{ __sap_general_preconfigure_min_pkgs }}"
      loop_control:
        loop_var: pkg
      check_mode: no
      register: __sap_general_preconfigure_register_minpkglist
      changed_when: no

    - name: Display the content of the minimum package list variable
      ansible.builtin.debug:
        var: __sap_general_preconfigure_register_minpkglist

    - name: Install minimum packages if required
      ansible.builtin.package:
        name: "{{ line_item.stdout }}"
        state: present
      with_items: "{{ __sap_general_preconfigure_register_minpkglist.results }}"
      loop_control:
        loop_var: line_item

# Reason for noqa: Both yum and dnf support "state: latest"
- name: Ensure that the system is updated to the latest patchlevel # noqa package-latest
  ansible.builtin.package:
    state: latest
    name: "*"
  when: sap_general_preconfigure_update

- name: "Set needs-restarting command in case of RHEL 7"
  ansible.builtin.set_fact:
    __sap_general_preconfigure_fact_needs_restarting_command: "needs-restarting -r"
  when: ansible_distribution_major_version == '7'

- name: "Set needs-restarting command in case of RHEL 8 or RHEL 9, except RHEL 8.0"
  ansible.builtin.set_fact:
    __sap_general_preconfigure_fact_needs_restarting_command: "yum needs-restarting -r"
  when:
    - (ansible_distribution_major_version == '8' or
         ansible_distribution_major_version == '9'
      )
    - ansible_distribution_version != '8.0'

- name: "Set customized needs-restarting command in case of RHEL 8.0"
  ansible.builtin.set_fact:
    __sap_general_preconfigure_fact_needs_restarting_command: "_IKRNL=$(rpm -q --last kernel | awk 'NR==1{sub(/kernel-/,\"\"); print $1}');
                                                       _CKRNL=$(uname -r); if [ ${_IKRNL} != ${_CKRNL} ]; then exit 1; else exit 0; fi"
  when: ansible_distribution_version == '8.0'

- name: Display the command for checking a reboot requirement
  ansible.builtin.debug:
    var: __sap_general_preconfigure_fact_needs_restarting_command

# Reason for noqa: The command to be executed might contain pipes
- name: Determine if the system needs to be restarted # noqa command-instead-of-shell
  ansible.builtin.shell: "{{ __sap_general_preconfigure_fact_needs_restarting_command }}"
  register: __sap_general_preconfigure_register_needs_restarting
  ignore_errors: true
  changed_when: false
  check_mode: false

- name: Display the output of the reboot requirement check
  ansible.builtin.debug:
    var: __sap_general_preconfigure_register_needs_restarting

- name: Set the reboot requirement flag to false
  ansible.builtin.set_fact:
    sap_general_preconfigure_fact_reboot_required: false

- name: For needs-restarting - Set the flag that reboot is needed to apply changes
  ansible.builtin.set_fact:
    sap_general_preconfigure_fact_reboot_required: true
  when: __sap_general_preconfigure_register_needs_restarting is failed

- name: For needs-restarting - Display the content of sap_general_preconfigure_fact_reboot_required
  ansible.builtin.debug:
    var: sap_general_preconfigure_fact_reboot_required

- name: Call Reboot handler if necessary
  ansible.builtin.command: /bin/true
  notify: __sap_general_preconfigure_reboot_handler
  when: __sap_general_preconfigure_register_needs_restarting is failed
